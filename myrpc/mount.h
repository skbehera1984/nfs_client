/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _MOUNT_H_RPCGEN
#define	_MOUNT_H_RPCGEN

#include <rpc/rpc.h>
#define	MNTPATHLEN 1024
#define	MNTNAMLEN 255
#define	FHSIZE 32
#define	FHSIZE3 64

typedef char fhandle[FHSIZE];

typedef struct {
	u_int fhandle3_len;
	char *fhandle3_val;
} fhandle3;

struct fhstatus {
	u_int fhs_status;
	union {
		fhandle fhs_fhandle;
	} fhstatus_u;
};
typedef struct fhstatus fhstatus;

#define	fhs_fh	fhstatus_u.fhs_fhandle

enum mountstat3 {
	MNT_OK = 0,
	MNT3ERR_PERM = 1,
	MNT3ERR_NOENT = 2,
	MNT3ERR_IO = 5,
	MNT3ERR_ACCES = 13,
	MNT3ERR_NOTDIR = 20,
	MNT3ERR_INVAL = 22,
	MNT3ERR_NAMETOOLONG = 63,
	MNT3ERR_NOTSUPP = 10004,
	MNT3ERR_SERVERFAULT = 10006
};
typedef enum mountstat3 mountstat3;

struct mountres3_ok {
	fhandle3 fhandle;
	struct {
		u_int auth_flavors_len;
		int *auth_flavors_val;
	} auth_flavors;
};
typedef struct mountres3_ok mountres3_ok;

struct mountres3 {
	mountstat3 fhs_status;
	union {
		mountres3_ok mountinfo;
	} mountres3_u;
};
typedef struct mountres3 mountres3;

typedef char *dirpath;

typedef char *name;

typedef struct mountbody *mountlist;

struct mountbody {
	name ml_hostname;
	dirpath ml_directory;
	mountlist ml_next;
};
typedef struct mountbody mountbody;

typedef struct groupnode *groups;

struct groupnode {
	name gr_name;
	groups gr_next;
};
typedef struct groupnode groupnode;

typedef struct exportnode *exports;

struct exportnode {
	dirpath ex_dir;
	groups ex_groups;
	exports ex_next;
};
typedef struct exportnode exportnode;

struct ppathcnf {
	int pc_link_max;
	short pc_max_canon;
	short pc_max_input;
	short pc_name_max;
	short pc_path_max;
	short pc_pipe_buf;
	u_char pc_vdisable;
	char pc_xxx;
	short pc_mask[2];
};
typedef struct ppathcnf ppathcnf;

#define	MOUNTPROG ((unsigned long)(100005))
#define	MOUNTVERS ((unsigned long)(1))
#define	MOUNTPROC_NULL ((unsigned long)(0))
extern  void * mountproc_null_1();
#define	MOUNTPROC_MNT ((unsigned long)(1))
extern  fhstatus * mountproc_mnt_1();
#define	MOUNTPROC_DUMP ((unsigned long)(2))
extern  mountlist * mountproc_dump_1();
#define	MOUNTPROC_UMNT ((unsigned long)(3))
extern  void * mountproc_umnt_1();
#define	MOUNTPROC_UMNTALL ((unsigned long)(4))
extern  void * mountproc_umntall_1();
#define	MOUNTPROC_EXPORT ((unsigned long)(5))
extern  exports * mountproc_export_1();
#define	MOUNTPROC_EXPORTALL ((unsigned long)(6))
extern  exports * mountproc_exportall_1();
extern int mountprog_1_freeresult();
#define	MOUNTVERS_POSIX ((unsigned long)(2))
extern  void * mountproc_null_2();
extern  fhstatus * mountproc_mnt_2();
extern  mountlist * mountproc_dump_2();
extern  void * mountproc_umnt_2();
extern  void * mountproc_umntall_2();
extern  exports * mountproc_export_2();
extern  exports * mountproc_exportall_2();
#define	MOUNTPROC_PATHCONF ((unsigned long)(7))
extern  ppathcnf * mountproc_pathconf_2();
extern int mountprog_2_freeresult();
#define	MOUNTVERS3 ((unsigned long)(3))
extern  void * mountproc_null_3();
extern  mountres3 * mountproc_mnt_3();
extern  mountlist * mountproc_dump_3();
extern  void * mountproc_umnt_3();
extern  void * mountproc_umntall_3();
extern  exports * mountproc_export_3();
extern int mountprog_3_freeresult();

/* the xdr functions */
extern bool_t xdr_fhandle();
extern bool_t xdr_fhandle3();
extern bool_t xdr_fhstatus();
extern bool_t xdr_mountstat3();
extern bool_t xdr_mountres3_ok();
extern bool_t xdr_mountres3();
extern bool_t xdr_dirpath();
extern bool_t xdr_name();
extern bool_t xdr_mountlist();
extern bool_t xdr_mountbody();
extern bool_t xdr_groups();
extern bool_t xdr_groupnode();
extern bool_t xdr_exports();
extern bool_t xdr_exportnode();
extern bool_t xdr_ppathcnf();

#endif /* !_MOUNT_H_RPCGEN */
